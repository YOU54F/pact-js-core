env:
  PACT_BROKER_FEATURES: publish_pacts_using_old_api

BUILD_TEST_TASK_TEMPLATE: &BUILD_TEST_TASK_TEMPLATE
  arch_check_script:
    - uname -am
  test_script:
    - node --version
    - script/ci/build-and-test.sh

linux_arm64_task:
  env:
    matrix:
      - IMAGE: node:16-slim
      - IMAGE: node:18-slim
      - IMAGE: node:20-slim
  arm_container:
    image: $IMAGE
  install_script:
    - apt update --yes && apt install --yes curl python3 make build-essential g++ unzip zip
  << : *BUILD_TEST_TASK_TEMPLATE

linux_amd64_task:
  env:
    matrix:
      - IMAGE: node:16-slim
      - IMAGE: node:18-slim
      - IMAGE: node:20-slim
  container:
    image: $IMAGE
  install_script:
    - apt update --yes && apt install --yes curl python3 make build-essential g++ unzip zip
  << : *BUILD_TEST_TASK_TEMPLATE

mac_arm64_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    PACT_BROKER_FEATURES: publish_pacts_using_old_api
    NVS_HOME: ${HOME}/.nvs
    PATH: ${NVS_HOME}:${PATH}
    matrix:
      - NODE_VERSION: 16
      - NODE_VERSION: 18
      - NODE_VERSION: 20
  install_script:
    - brew install nvm
    - source $(brew --prefix nvm)/nvm.sh
    - nvm install $NODE_VERSION
    - nvm use $NODE_VERSION
  << : *BUILD_TEST_TASK_TEMPLATE

mac_rosetta_task:
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-base:latest
  env:
    NVS_HOME: ${HOME}/.nvs
    PATH: ${NVS_HOME}:${PATH}
    matrix:
      - NODE_VERSION: 16
      - NODE_VERSION: 18
      - NODE_VERSION: 20
  install nvs_script: |
    git clone https://github.com/jasongin/nvs "$NVS_HOME"
    . "$NVS_HOME/nvs.sh" install
  install_rosetta_script: softwareupdate --install-rosetta --agree-to-license
  install_x64_script: | 
    . "$NVS_HOME/nvs.sh"
    nvs add $NODE_VERSION/x64
    nvs use $NODE_VERSION/x64
    file $(which node) | grep -e 'x64'
    node --version
  << : *BUILD_TEST_TASK_TEMPLATE
