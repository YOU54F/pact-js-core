name: Build and test

on:
  push:
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:

  # create_pre_release:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - run: GH_CREATE_PRE_RELEASE=true ./script/ci/release.sh
  #       if: github.ref == 'refs/heads/master' && env.ACT != 'true' && runner.os == 'Linux'
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
   
  # prebuild:
  #   needs: [ create_pre_release ]
  #   runs-on: ${{ matrix.os }}
  #   defaults:
  #     run:
  #       shell: bash
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: [20]
  #       os: [
  #         macos-14, 
  #         macos-12, 
  #         ubuntu-latest,
  #         windows-latest
  #         ]

  #   env:
  #     NODE_VERSION: ${{ matrix.node-version }}

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
      
  #     - name: Use Node.js ${{ matrix.node-version  }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ matrix.node-version  }}

  #     - if: runner.os == 'Windows'
  #       run: echo "ONLY_DOWNLOAD_PACT_FOR_WINDOWS=true" >> $GITHUB_ENV


  #     - name: Set up QEMU
  #       if: runner.os == 'Linux'
  #       uses: docker/setup-qemu-action@v3
  #     - name: Set up Docker Buildx
  #       if: runner.os == 'Linux'
  #       uses: docker/setup-buildx-action@v3
  #     - if: runner.os == 'Linux'
  #       name: prebuild linux amd64 musl
  #       run: docker run -v $PWD:/home/node/app --platform linux/amd64 --rm node:${{ matrix.node-version }}-alpine /bin/sh -c apk add bash && cd /home/node/app && ./script/ci/prebuild-alpine.sh && rm -rf ffi node_modules'
  #     - if: runner.os == 'Linux'
  #       name: prebuild linux arm64 musl
  #       run: docker run -v $PWD:/home/node/app --platform linux/arm64 --rm node:${{ matrix.node-version }}-alpine /bin/sh -c 'apk add bash && cd /home/node/app && ./script/ci/prebuild-alpine.sh && rm -rf ffi node_modules'
  #     - if: runner.os == 'Linux'
  #       name: prebuild linux arm64
  #       run: docker run -v $PWD:/home/node/app --platform linux/arm64 --rm node:${{ matrix.node-version }} /bin/bash -c 'cd /home/node/app && ./script/ci/prebuild.sh && rm -rf ffi node_modules'
  #     - run: sudo chown -R $(id -u):$(id -g) prebuilds
  #       if: runner.os == 'Linux'
  #     - run: ./script/ci/prebuild.sh
  #     - name: Upload prebuild for ${{ runner.os }}-${{ runner.arch }}
  #       uses: actions/upload-artifact@v3
  #       with:
  #         path: prebuilds/*.tar.gz
          
  #     # - run: GH_PRE_RELEASE_UPLOAD=true ./script/ci/release.sh
  #     #   if: github.ref == 'refs/heads/master' && env.ACT != 'true'
  #     #   env:
  #     #       GITHUB_TOKEN: ${{ github.token }}

  test:
    runs-on: ${{ matrix.os }}
    # needs: [prebuild]
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macos-14
          #   arch: amd64
          #   node-version: 16
          # - os: macos-12
          #   arch: arm64
          #   node-version: 16
          # - os: windows-latest
          #   arch: amd64
          #   node-version: 16
          - os: ubuntu-latest
            arch: amd64
            musl: false
            docker: false
            node-version: 16
          - os: ubuntu-latest
            arch: arm64
            musl: false
            docker: true
            node-version: 16
          - os: ubuntu-latest
            arch: arm64
            musl: true
            docker: true
            node-version: 16
          - os: ubuntu-latest
            arch: amd64
            musl: true
            docker: true
            node-version: 16
          # - os: macos-14
          #   arch: amd64
          #   node-version: 18
          # - os: macos-12
          #   arch: arm64
          #   node-version: 18
          # - os: windows-latest
          #   arch: amd64
          #   node-version: 18
          - os: ubuntu-latest
            arch: amd64
            musl: false
            docker: false
            node-version: 18
          - os: ubuntu-latest
            arch: arm64
            musl: false
            docker: true
            node-version: 18
          - os: ubuntu-latest
            arch: arm64
            musl: true
            docker: true
            node-version: 18
          - os: ubuntu-latest
            arch: amd64
            musl: true
            docker: true
            node-version: 18
          # - os: macos-14
          #   arch: amd64
          #   node-version: 20
          # - os: macos-12
          #   arch: arm64
          #   node-version: 20
          # - os: windows-latest
          #   arch: amd64
          #   node-version: 20
          - os: ubuntu-latest
            arch: amd64
            musl: false
            docker: false
            node-version: 20
          - os: ubuntu-latest
            arch: arm64
            musl: false
            docker: true
            node-version: 20
          - os: ubuntu-latest
            arch: arm64
            musl: true
            docker: true
            node-version: 20
          - os: ubuntu-latest
            arch: amd64
            musl: true
            docker: true
            node-version: 20
    env:
      NODE_VERSION: ${{ matrix.node-version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download prebuilds
        uses: actions/download-artifact@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
        if: matrix.docker != true

      - if: runner.os == 'Windows'
        run: echo "ONLY_DOWNLOAD_PACT_FOR_WINDOWS=true" >> $GITHUB_ENV

      - if: runner.os == 'Linux' && matrix.docker == 'true' && matrix.arch == 'arm64'
        run: echo "SKIP_STANDALONE=true" >> $GITHUB_ENV

      - run: FETCH_ASSETS=true REPO=you54f/pact-js-core ./script/ci/check-release-libs.sh --fetch-assets -t v15.0.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - run: ./script/ci/download-standalone-and-test.sh
        if: matrix.docker != true


      # Linux aarch64 tests are skipped as QEMU fails when executing the ruby binaries
      # Related comment: https://github.com/phusion/passenger/issues/2288#issuecomment-1387625121 
      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.docker == true && matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: runner.os == 'Linux' && matrix.docker == true && matrix.arch == 'arm64'
        uses: docker/setup-buildx-action@v3
      - if: runner.os == 'Linux' && matrix.docker == true && matrix.musl != true && matrix.arch == 'arm64'
        name: test arm64
        run: docker run -v $PWD:/home/node/app --platform linux/${{ matrix.arch }} --rm node:${{ matrix.node-version }} /bin/bash -c 'npm config set cache /tmp && apt install -y shared-mime-info && cd /home/node/app && ./script/ci/download-standalone-and-test.sh'
      - if: runner.os == 'Linux' && matrix.docker == true && matrix.musl == true
        name: test linux ${{ matrix.arch }} musl # Setting the cache location is a workaround for node 16 install errors https://github.com/npm/cli/issues/5114
        run: docker run -v $PWD:/home/node/app --platform linux/${{ matrix.arch }} --rm node:${{ matrix.node-version }}-alpine /bin/sh -c 'npm config set cache /tmp && apk add bash curl shared-mime-info gcompat libc6-compat gzip file protoc protobuf-dev && cd /home/node/app && ./script/ci/download-standalone-and-test.sh'

  # release_dry_run:
  #   runs-on: ubuntu-latest
  #   needs: [ create_pre_release, prebuild ]
  #   if: github.ref == 'refs/heads/master'

  #   env:
  #     NODE_VERSION: 20

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Use Node.js ${{ env.NODE_VERSION }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         registry-url: 'https://registry.npmjs.org'

  #     - name: "release - dry run: ${{ env.DRY_RUN }}"
  #       id: publish
  #       run: script/ci/release.sh
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #         DRY_RUN: true

  #     - run: echo "New Release will be v${{ steps.publish.outputs.version }}"